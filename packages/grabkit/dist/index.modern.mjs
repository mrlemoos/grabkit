const t=["GET","POST","PUT","DELETE","PATCH","HEAD","OPTIONS"];class e{constructor(t,e){if(this.baseURL=void 0,this.method=void 0,this.url=void 0,this.baseURL=e,!t)throw new Error("[GrabKit] Where you call? I think you forgot to pass an endpoint \\_(-_-)_/.");const[o,s]=String(t).trim().split(" ");if("string"!=typeof o)throw new Error("[GrabKit] I think you forgot the method in your endpoint. It should be like `GET /users/` for instance.");const r=o.trim().toUpperCase();let a=s.trim().toLowerCase();a.startsWith("https://")||a.startsWith("http://")||(a=`${e}${a}`),this.validateMethod(r),this.validateURI(a),this.debugIfTest()}async send({body:t,headers:e}){const o=await fetch(this.url,{method:this.method,body:"object"==typeof t?JSON.stringify(t):void 0,headers:e}),s=await o.json();return o.ok?[{data:s},o.status]:[{data:void 0,error:s},o.status]}debugIfTest(){"test"===process.env.NODE_ENV&&console.log(`Call: the method was set to be '${this.method}' at '${this.url}'`)}validateURI(t){if("string"!=typeof t)throw new Error(`[GrabKit] Where you call? I think you forgot to pass a URI. \nYou should give us a URI like this: call()('GET /users') so we can get your data : ) (if it helps, we've got ${t})`);if(!(t.startsWith("http://")||t.startsWith("https://")||t.startsWith("/")))throw new Error('[GrabKit] I can be wrong, but I think you forgot to add "http://" or "https://" at the beginning of your URI. \\_(-_-)_/ We don\'t have it automatically because we\'re not sure which of them you wanna use as prefix. \n');if(t.startsWith("/")&&"string"!=typeof this.baseURL)throw new Error("[GrabKit] You have to give us a baseURL if you want to use a relative URI. Or you meant to use octokit, not sure yet :/\n")}validateMethod(e){if("string"!=typeof e)throw new Error(`[GrabKit] Where you call? I think you forgot to pass a method. \nYou should give us a method like this: call()('GET /users') so we can get your data :P (if it helps, we've got ${e})`);if(!t.includes(e))throw new Error(`[GrabKit] I can be wrong, but I think there's no HTTP method called '${e}'`)}}function o(t){return async function(o,{body:s,headers:r}){const a=new e(o,t),[i,h]=await a.send({body:s,headers:r});return[i,h]}}export{o as default};
//# sourceMappingURL=index.modern.mjs.map
